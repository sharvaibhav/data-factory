{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "vaibhav-rg-df"
		},
		"AzureDataLakeStorageParquet_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorageParquet'"
		},
		"BlobLinkedService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'BlobLinkedService'"
		},
		"DataBrics_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'DataBrics'"
		},
		"MySqlLinkedService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'MySqlLinkedService'"
		},
		"TableLinkedService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'TableLinkedService'"
		},
		"loggingservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'loggingservice'"
		},
		"AzureDataLakeStorageParquet_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://vaibhavadfgen2.dfs.core.windows.net/"
		},
		"DataBrics_properties_typeProperties_existingClusterId": {
			"type": "string",
			"defaultValue": "0811-223959-y590ajt6"
		},
		"EquipmentDeltaTrigger_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/c63acff1-61c0-421d-99ca-ccb211229afe/resourceGroups/Aize-Dev-Vaibhav-RG/providers/Microsoft.Storage/storageAccounts/vaibhavadfgen2"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorageParquet')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorageParquet_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorageParquet_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BlobLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('BlobLinkedService_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataBrics')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-2124816921534772.12.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('DataBrics_accessToken')]"
					},
					"existingClusterId": "[parameters('DataBrics_properties_typeProperties_existingClusterId')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MySqlLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"MySqlServerName": {
						"type": "String"
					},
					"MySqlDBName": {
						"type": "String"
					},
					"MySQLUserName": {
						"type": "String"
					},
					"MySQLPassword": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureMySql",
				"typeProperties": {
					"connectionString": "[parameters('MySqlLinkedService_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TableLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureTableStorage",
				"typeProperties": {
					"connectionString": "[parameters('TableLinkedService_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/loggingservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('loggingservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/EquipmentDeltaTrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/parquetdeltas/blobs/equipment/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('EquipmentDeltaTrigger_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/JoinedSinkBlobStorage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"joinedFileSync": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "sink"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MySQLTableDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MySqlLinkedService",
					"type": "LinkedServiceReference",
					"parameters": {
						"MySqlServerName": {
							"value": "@dataset().datasetMySqlServerName",
							"type": "Expression"
						},
						"MySqlDBName": {
							"value": "@dataset().datasetMySqlDBName",
							"type": "Expression"
						},
						"MySQLUserName": {
							"value": "@dataset().datasetMySQLUserName",
							"type": "Expression"
						},
						"MySQLPassword": {
							"value": "@dataset().datasetMySQLPassword",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"datasetMySQLDbTableName": {
						"type": "String",
						"defaultValue": "equipment"
					},
					"datasetMySqlServerName": {
						"type": "String",
						"defaultValue": "vaibhav-adf-mysql-server.mysql.database.azure.com"
					},
					"datasetMySqlDBName": {
						"type": "String",
						"defaultValue": "dump"
					},
					"datasetMySQLUserName": {
						"type": "String",
						"defaultValue": "vaibhav@vaibhav-adf-mysql-server"
					},
					"datasetMySQLPassword": {
						"type": "String",
						"defaultValue": "Test1234"
					}
				},
				"annotations": [],
				"type": "AzureMySqlTable",
				"schema": [],
				"typeProperties": {
					"tableName": {
						"value": "@dataset().datasetMySQLDbTableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MySqlLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParquetDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageParquet",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileNameParquet": {
						"type": "String",
						"defaultValue": "equipment.parquet"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileNameParquet",
							"type": "Expression"
						},
						"fileSystem": "parquet"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageParquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SinkBlobDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "sink"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceBlobDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobLinkedService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"BlobSourceFileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().BlobSourceFileName",
							"type": "Expression"
						},
						"container": "source"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/BlobLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TableStorageDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TableLinkedService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableStorageName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureTable",
				"schema": [],
				"typeProperties": {
					"tableName": {
						"value": "@dataset().TableStorageName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/TableLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BlobDataMovementPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Blob Area Data Movement",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "DESCRIPTION",
								"value": "Blob data movement between source and sync."
							}
						],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SourceBlobDataSet",
								"type": "DatasetReference",
								"parameters": {
									"BlobSourceFileName": {
										"value": "@pipeline().parameters.BlobDataMovementPipelineSourceNameArea",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "SinkBlobDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Blob System Data Movement",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "DESCRIPTION",
								"value": "Blob data movement between source and sync."
							}
						],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SourceBlobDataSet",
								"type": "DatasetReference",
								"parameters": {
									"BlobSourceFileName": {
										"value": "@pipeline().parameters.BlobDataMovementPipelineSourceNameSystem",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "SinkBlobDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Blob Equipment Data Movement",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "DESCRIPTION",
								"value": "Blob data movement between source and sync."
							}
						],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SourceBlobDataSet",
								"type": "DatasetReference",
								"parameters": {
									"BlobSourceFileName": {
										"value": "@pipeline().parameters.BlobDataMovementPipelineSourceNameEquipment",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "SinkBlobDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Blob Discipline Data Movement",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "DESCRIPTION",
								"value": "Blob data movement between source and sync."
							}
						],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SourceBlobDataSet",
								"type": "DatasetReference",
								"parameters": {
									"BlobSourceFileName": {
										"value": "@pipeline().parameters.BlobDataMovementPipelineSourceNameDiscipline",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "SinkBlobDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"BlobDataMovementPipelineSinkFileName": {
						"type": "String"
					},
					"BlobDataMovementPipelineSourceNameArea": {
						"type": "String",
						"defaultValue": "johancastberg-area-data.json"
					},
					"BlobDataMovementPipelineSourceNameEquipment": {
						"type": "String",
						"defaultValue": "johancastberg-equipments-data.json"
					},
					"BlobDataMovementPipelineSourceNameSystem": {
						"type": "String",
						"defaultValue": "johancastberg-system-data.json"
					},
					"BlobDataMovementPipelineSourceNameDiscipline": {
						"type": "String",
						"defaultValue": "johancastberg-discipline-data.json"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceBlobDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SinkBlobDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TableToSourceMYSqlTableMovementPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Move Equipment Table to MySql Table",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureTableSource",
								"azureTableSourceIgnoreTableNotFound": false
							},
							"sink": {
								"type": "AzureMySqlSink",
								"writeBatchSize": 10000,
								"writeBatchTimeout": "00:00:30"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "TableStorageDataSet",
								"type": "DatasetReference",
								"parameters": {
									"TableStorageName": {
										"value": "@pipeline().parameters.pipelineTableStorageNameEquipment",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "MySQLTableDataSet",
								"type": "DatasetReference",
								"parameters": {
									"datasetMySQLDbTableName": {
										"value": "@pipeline().parameters.pipelineMySqlDbTableNameEquipment",
										"type": "Expression"
									},
									"datasetMySqlServerName": {
										"value": "@pipeline().parameters.pipelineMySqlServerName",
										"type": "Expression"
									},
									"datasetMySqlDBName": {
										"value": "@pipeline().parameters.pipelineMySqlDbName",
										"type": "Expression"
									},
									"datasetMySQLUserName": {
										"value": "@pipeline().parameters.pipelineMySqlUserName",
										"type": "Expression"
									},
									"datasetMySQLPassword": {
										"value": "@pipeline().parameters.pipelineMySqlPassword",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Move Area Table to MySql Table",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureTableSource",
								"azureTableSourceIgnoreTableNotFound": false
							},
							"sink": {
								"type": "AzureMySqlSink",
								"writeBatchSize": 10000,
								"writeBatchTimeout": "00:00:30"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "TableStorageDataSet",
								"type": "DatasetReference",
								"parameters": {
									"TableStorageName": {
										"value": "@pipeline().parameters.pipelineTableStorageNameArea",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "MySQLTableDataSet",
								"type": "DatasetReference",
								"parameters": {
									"datasetMySQLDbTableName": {
										"value": "@pipeline().parameters.pipelineMySqlDbTableNameArea",
										"type": "Expression"
									},
									"datasetMySqlServerName": {
										"value": "@pipeline().parameters.pipelineMySqlServerName",
										"type": "Expression"
									},
									"datasetMySqlDBName": {
										"value": "@pipeline().parameters.pipelineMySqlDbName",
										"type": "Expression"
									},
									"datasetMySQLUserName": {
										"value": "@pipeline().parameters.pipelineMySqlUserName",
										"type": "Expression"
									},
									"datasetMySQLPassword": {
										"value": "@pipeline().parameters.pipelineMySqlPassword",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Move System Table to MySql Table",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureTableSource",
								"azureTableSourceIgnoreTableNotFound": false
							},
							"sink": {
								"type": "AzureMySqlSink",
								"writeBatchSize": 10000,
								"writeBatchTimeout": "00:00:30"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "TableStorageDataSet",
								"type": "DatasetReference",
								"parameters": {
									"TableStorageName": {
										"value": "@pipeline().parameters.pipelineTableStorageNameSystem",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "MySQLTableDataSet",
								"type": "DatasetReference",
								"parameters": {
									"datasetMySQLDbTableName": {
										"value": "@pipeline().parameters.pipelineMySqlDbTableNameSystem",
										"type": "Expression"
									},
									"datasetMySqlServerName": {
										"value": "@pipeline().parameters.pipelineMySqlServerName",
										"type": "Expression"
									},
									"datasetMySqlDBName": {
										"value": "@pipeline().parameters.pipelineMySqlDbName",
										"type": "Expression"
									},
									"datasetMySQLUserName": {
										"value": "@pipeline().parameters.pipelineMySqlUserName",
										"type": "Expression"
									},
									"datasetMySQLPassword": {
										"value": "@pipeline().parameters.pipelineMySqlPassword",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"pipelineTableStorageNameEquipment": {
						"type": "String",
						"defaultValue": "equipments"
					},
					"pipelineMySqlDbTableNameEquipment": {
						"type": "String",
						"defaultValue": "equipment"
					},
					"pipelineMySqlServerName": {
						"type": "String",
						"defaultValue": "vaibhav-adf-mysql-server.mysql.database.azure.com"
					},
					"pipelineMySqlDbName": {
						"type": "String",
						"defaultValue": "dump"
					},
					"pipelineMySqlUserName": {
						"type": "String",
						"defaultValue": "vaibhav@vaibhav-adf-mysql-server"
					},
					"pipelineMySqlPassword": {
						"type": "String",
						"defaultValue": "Test1234"
					},
					"pipelineTableStorageNameSystem": {
						"type": "string",
						"defaultValue": "system"
					},
					"pipelineMySqlDbTableNameSystem": {
						"type": "string",
						"defaultValue": "system"
					},
					"pipelineTableStorageNameArea": {
						"type": "string",
						"defaultValue": "area"
					},
					"pipelineMySqlDbTableNameArea": {
						"type": "string",
						"defaultValue": "area"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TableStorageDataSet')]",
				"[concat(variables('factoryId'), '/datasets/MySQLTableDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PEquipmentArea')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ParquetDataSet",
								"type": "DatasetReference"
							},
							"name": "Equipment"
						},
						{
							"dataset": {
								"referenceName": "ParquetDataSet",
								"type": "DatasetReference"
							},
							"name": "Area"
						},
						{
							"dataset": {
								"referenceName": "ParquetDataSet",
								"type": "DatasetReference"
							},
							"name": "StandardTable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParquetDataSet",
								"type": "DatasetReference"
							},
							"name": "mysink"
						},
						{
							"dataset": {
								"referenceName": "ParquetDataSet",
								"type": "DatasetReference"
							},
							"name": "EquipmentAndAreaSink"
						}
					],
					"transformations": [
						{
							"name": "AreaStandardTable"
						},
						{
							"name": "EquipmentAndAreaJoin"
						},
						{
							"name": "AreaTableMap",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "standardTableMap",
							"description": "Creates an explicit mapping for each drifted column"
						}
					],
					"scriptLines": [
						"source(output(",
						"          index as string,",
						"          TopTag as string,",
						"          ControlSystem as string,",
						"          WetCOGX_UOM_Comos as string,",
						"          ServiceDescription2 as string,",
						"          MChandoverDate as string,",
						"          SignalRange as string,",
						"          NamePlateTagno as string,",
						"          Capacity_Comos as string,",
						"          TagFormat as string,",
						"          EquipmentElevation_Comos as string,",
						"          PdmsClass as string,",
						"          ExTemperatureClass1 as string,",
						"          HeatRequiredNormalElectrical_Comos as string,",
						"          OperatingTemperatureMin_Comos as string,",
						"          RatedOutput as string,",
						"          InstallationContractor as string,",
						"          RatedPowerOperating_UOM_Comos as string,",
						"          RequisitonTotalEstimate as string,",
						"          IDXSystemUID as string,",
						"          FireArea_SystemUID as string,",
						"          HeatRequiredNormalElectrical_UOM_Comos as string,",
						"          DesignPressureMin as string,",
						"          ContentWeight_Comos as string,",
						"          RequisitionPlannedCallOffDate as string,",
						"          RequisitionQtyNew_UOM as string,",
						"          Owner_SystemUID as string,",
						"          DisplayRangeMax as string,",
						"          OperatingTemperatureHotSideIn as string,",
						"          SiteNeedDate as string,",
						"          Diameter as string,",
						"          ActionStatus as string,",
						"          Length_UOM_Comos as string,",
						"          NamePlateLine2 as string,",
						"          HookupActivity as string,",
						"          DesignTemperatureHotSideMax_Comos as string,",
						"          ExProtectionType3 as string,",
						"          LineNoEndC3 as string,",
						"          ExProtectionType2 as string,",
						"          DryCOGX_UOM_Comos as string,",
						"          ActExClass as string,",
						"          HeatDissipationMax_Comos as string,",
						"          OperatingTemperatureHotSideIn_UOM_Comos as string,",
						"          DesignTemperatureHotSideMin as string,",
						"          NamePlateComplete as string,",
						"          Replacing as string,",
						"          Room_SystemUID as string,",
						"          CreatedByUser as string,",
						"          RequisitionQtyDelta_UOM as string,",
						"          ReplacedBy as string,",
						"          Name as string,",
						"          DesignPressureHotSideMin_Comos as string,",
						"          PurchaseAs as string,",
						"          EXGasGroup1 as string,",
						"          RequiredPower_Comos as string,",
						"          Facility_SystemUID as string,",
						"          ConnectionGroup as string,",
						"          Height_UOM_Comos as string,",
						"          DesignPressureMin_Comos as string,",
						"          SetPressurePC as string,",
						"          DisplayRangeMin as string,",
						"          CategoryCode as string,",
						"          HookupCableSpliced as string,",
						"          SelectedRangeMax_Comos as string,",
						"          AreaCode_SystemUID as string,",
						"          MeasureRangeMax_Comos as string,",
						"          DryCOGZ as string,",
						"          ValveNominalSize_Comos_UOM as string,",
						"          OperatorView as string,",
						"          MountedOnSystemUID as string,",
						"          IndexType as string,",
						"          DatumY_Comos as string,",
						"          EXGasGroup2 as string,",
						"          Zone as string,",
						"          FireArea as string,",
						"          ContentWeight_UOM_Comos as string,",
						"          ObjectState as string,",
						"          VoltageNominalCell_Comos_UOM as string,",
						"          FlowDesignMin as string,",
						"          ValveBodyType as string,",
						"          PdmsSubClass as string,",
						"          OperatingPressureSide1Outlet_Comos as string,",
						"          Communication as string,",
						"          LineNoEndC4 as string,",
						"          RatedVoltageRequired as string,",
						"          HeatTraceTemperature_Comos_UOM as string,",
						"          HeatDissipationMax as string,",
						"          DisplayRangeMax_Comos as string,",
						"          PowerStatus as string,",
						"          Requisition as string,",
						"          NamePlateVoltageNom_Comos as string,",
						"          Discipline as string,",
						"          SetPressure as string,",
						"          DisplayRangeMin_Comos as string,",
						"          ShaftPower as string,",
						"          OperatingTemperatureMin as string,",
						"          NominalVoltage_UOM_Comos as string,",
						"          RatedPower as string,",
						"          CurrentNominal_UOM_Comos as string,",
						"          Length as string,",
						"          RequisitionTotalDesign_UOM as string,",
						"          DesignTemperatureMax as string,",
						"          PipeFlowDirectionEndC2 as string,",
						"          HeatRequiredNormalElectrical as string,",
						"          RatedSpeedDrivenEquipment_Comos as string,",
						"          IOcabinet as string,",
						"          IPGrade2 as string,",
						"          ValveDatasheet as string,",
						"          SignalAlarmFunction as string,",
						"          DatumZ as string,",
						"          WeightPhaseCode as string,",
						"          OperatingVolume_Comos as string,",
						"          GraphicalPresentationTab as string,",
						"          RatedOutput_Comos as string,",
						"          SystemUID as string,",
						"          ReplacedBySystemUID as string,",
						"          DesignTemperatureHotSideMax as string,",
						"          Duty as string,",
						"          RatedPowerOperating_Comos as string,",
						"          OperatingTemperatureMax as string,",
						"          RiskAssessmentComments as string,",
						"          ElectricalSupplySystemNo as string,",
						"          IsDeleted as string,",
						"          ChannelOuptutSetting as string,",
						"          OperatingWeight_Comos as string,",
						"          DryWeight as string,",
						"          MainFunctionTag as string,",
						"          ReactivePowerNP_UOM as string,",
						"          ApparentPowerNP_UOM as string,",
						"          DesignTemperature_UOM_Comos as string,",
						"          NominalVoltage_Comos as string,",
						"          WireConnectProfile as string,",
						"          WeightQuantity as string,",
						"          SILRequirement as string,",
						"          IoCardSignalType as string,",
						"          Width as string,",
						"          ContentWeight as string,",
						"          ElectricalSupplySystemNo_SystemUID as string,",
						"          Diameter_Comos as string,",
						"          VoltageSystem_Comos as string,",
						"          DryWeight_UOM_Comos as string,",
						"          EquipmentElevation_UOM_Comos as string,",
						"          NominalPower_UOM_Comos as string,",
						"          MeasureSetPoint_UOM_Comos as string,",
						"          FlowDesignMax as string,",
						"          WetCOGX_Comos as string,",
						"          ControlNodeInterface as string,",
						"          NoteRequirements as string,",
						"          NamePlateVoltageNom as string,",
						"          CurrentNominal_Comos as string,",
						"          ProcurementPriority as string,",
						"          Facility as string,",
						"          HeatDissStatus as string,",
						"          RequisitionEstimatedQty as string,",
						"          FunctionCode as string,",
						"          DesignPressureMax as string,",
						"          OperatingTemperatureMax_Comos as string,",
						"          SystemNo_SystemUID as string,",
						"          bk_tag as string,",
						"          SuctionPressureDesign_UOM_Comos as string,",
						"          DesignPressureHotSideMin as string,",
						"          LockPosition as string,",
						"          TanTanGeneralTop_Comos as string,",
						"          DisplaySetPoint_UOM_Comos as string,",
						"          LineNoEndC1 as string,",
						"          NamePlateLine3 as string,",
						"          LoopTest1 as string,",
						"          Description as string,",
						"          OwnerLabel as string,",
						"          InstallationContractor_SystemUID as string,",
						"          OperatingTemperatureHotSideIn_Comos as string,",
						"          VoltageNominalCell_Comos as string,",
						"          InterLockType as string,",
						"          MeasureSetPoint as string,",
						"          FabricationContractor as string,",
						"          DatumY as string,",
						"          NoteVendorData as string,",
						"          DesignTemperatureMin as string,",
						"          StatusCodeE3D as string,",
						"          WetCOGY as string,",
						"          OperatingPressureCaseDependentMax as string,",
						"          HeatExchangedPerUnit as string,",
						"          NamePlateNominalPowerNom as string,",
						"          SurfaceAreaPerShell_UOM_Comos as string,",
						"          MCBCharacteristic as string,",
						"          ActionStatus_SystemUID as string,",
						"          LoopNo as string,",
						"          TopTag_SystemUID as string,",
						"          OperatingPressureSide1InletMax as string,",
						"          ShaftPower_Comos as string,",
						"          LockYesNo as string,",
						"          TanTanGeneralTop as string,",
						"          RequisitionPlannedIFIDate as string,",
						"          ChannelInputSetting as string,",
						"          FutureYesNo as string,",
						"          LoopTest2 as string,",
						"          MeasureRange_Min as string,",
						"          Hookup as string,",
						"          HeatDissipation as string,",
						"          RatedSpeedDrivenEquipment_UOM_Comos as string,",
						"          SuctionPressureDesign as string,",
						"          SelectOperatorView as string,",
						"          FBtype as string,",
						"          CompensationFlag as string,",
						"          MesaureRangeMax as string,",
						"          OperatingPressureSide1Inlet_Comos as string,",
						"          FunctionCode_SystemUID as string,",
						"          DryCOGY_UOM_Comos as string,",
						"          EngContractor as string,",
						"          OperatingPressureSide1Outlet_SI as string,",
						"          FlowDesignMax_Comos as string,",
						"          OperatingPressureCaseDependent as string,",
						"          DisplaySetPoint_Comos as string,",
						"          FabricationAssembly as string,",
						"          OwnerFullLabel as string,",
						"          SystemNo as string,",
						"          DesignBasisRA as string,",
						"          SelectedRangeMax as string,",
						"          AreaCode as string,",
						"          CalibratedRange_UOM_Comos as string,",
						"          Height_Comos as string,",
						"          OperatingPressureSide1Inlet_UOM_Comos as string,",
						"          SurfaceAreaPerShell_Comos as string,",
						"          Model as string,",
						"          VoltageRated as string,",
						"          TopTagYesNo as string,",
						"          IPGrade1 as string,",
						"          DiameterInner_Comos as string,",
						"          RequiredPower as string,",
						"          NamePlateNominalPowerNom_UOM_Comos as string,",
						"          Service as string,",
						"          CompensationCategory as string,",
						"          PEDCategory as string,",
						"          DesignTemperatureHotSide_UOM_Comos as string,",
						"          NamePlateEfficiencyNom as string,",
						"          PurchaseDescription as string,",
						"          BackPressure as string,",
						"          DryCOGZ_UOM_Comos as string,",
						"          PipeFlowDirectionEndC1 as string,",
						"          Remarks as string,",
						"          DesignPressureHotSideMax_Comos as string,",
						"          PowerNP as string,",
						"          FabQualityNeedDate as string,",
						"          Commissioningpackage_SystemUID as string,",
						"          DisplayRange_UOM_Comos as string,",
						"          SelectedRange_UOM_Comos as string,",
						"          WetCOGZ_UOM_Comos as string,",
						"          Suffix as string,",
						"          DatumX_Comos as string,",
						"          TagNumber as string,",
						"          HookupPhase as string,",
						"          PurchaseDescriptionFormat as string,",
						"          CurrentNP as string,",
						"          DatumX_UOM_Comos as string,",
						"          ComosBaseObject_SystemUID as string,",
						"          RequisitionQty as string,",
						"          ShutdownLevel as string,",
						"          SequenceNo as string,",
						"          NamePlateNominalPowerOpe as string,",
						"          PurchaseDescriptionChanged as string,",
						"          ConstructionSegmentName as string,",
						"          Discipline_SystemUID as string,",
						"          HookupContractor as string,",
						"          WeightPhase_SystemUID as string,",
						"          DisplaySetPoint as string,",
						"          MesaureRangeMin as string,",
						"          ProductCertificateNumber as string,",
						"          NamePlateRespText as string,",
						"          RatedOutput_UOM_Comos as string,",
						"          InhibitLocationUpdate as string,",
						"          ExTemperatureClass3 as string,",
						"          RequisitionQtyDelta as string,",
						"          CreateDate as string,",
						"          OperatingTemperature_UOM_Comos as string,",
						"          PhaseConnection as string,",
						"          DryCOGX_Comos as string,",
						"          Manufacturer as string,",
						"          SerialNo as string,",
						"          EXGasGroup1_SystemUID as string,",
						"          RequisitionDesignQty_UOM as string,",
						"          TemporaryFlag as string,",
						"          NamePlateNominalPowerOpe_UOM_Comos as string,",
						"          FoundationRequest as string,",
						"          WetCOGZ as string,",
						"          PowerReactive as string,",
						"          RatedSpeedDrivenEquipment as string,",
						"          OperatingTemperature_Comos as string,",
						"          CalibratedRangeMin as string,",
						"          RequisitionDesignQty as string,",
						"          HookupArea_SystemUID as string,",
						"          MeasureSetPoint_Comos as string,",
						"          ValveNominalSize as string,",
						"          RequiredPower_UOM_Comos as string,",
						"          ClientStatus as string,",
						"          EquipmentElevation as string,",
						"          OperatingVolume as string,",
						"          OperatingWeight_UOM_Comos as string,",
						"          Label as string,",
						"          DesignTemperatureMax_Comos as string,",
						"          Project as string,",
						"          PurchaseOrder as string,",
						"          MeasureRangeMin_Comos as string,",
						"          CosPhiNom as string,",
						"          FootprintAccuraryRA as string,",
						"          HeatExchangedPerUnit_Comos as string,",
						"          RequisitonTotalEstimate_UOM as string,",
						"          Diameter_UOM_Comos as string,",
						"          DatumX as string,",
						"          ProcurementPackage as string,",
						"          SelectedRangeMin as string,",
						"          NoOfCorrObjInPDMS as string,",
						"          NamePlateUsageFactor as string,",
						"          HookupContractor_SystemUID as string,",
						"          NamePlateDuty as string,",
						"          NamePlateLine4 as string,",
						"          FlowDesign_UOM_Comos as string,",
						"          ExProtectionType1 as string,",
						"          LineNoEndC2 as string,",
						"          MCqualityNeedDate as string,",
						"          MCBRatedCurrent_Comos as string,",
						"          SignalPowerSource as string,",
						"          IndexType_SystemUID as string,",
						"          PIDS as string,",
						"          HeatTracing as string,",
						"          NamePlateVoltageNom_UOM_Comos as string,",
						"          OperatingWeight as string,",
						"          HardwareTypical as string,",
						"          DesignTemperatureMin_Comos as string,",
						"          OperatingPressureCaseDependent_Comos as string,",
						"          DiameterInner_Comos_UOM as string,",
						"          VoltageRated_Comos as string,",
						"          RequisitionProposal as string,",
						"          GalvanicSeparatedInDevice as string,",
						"          FBreference as string,",
						"          ReactivePowerNP as string,",
						"          PurchaseAsTagYesNo as string,",
						"          ComosCheckUid as string,",
						"          SignalAlarmPriority as string,",
						"          CalibratedRangeMax_Comos as string,",
						"          NamePlateMaterial as string,",
						"          ValveBodyRating as string,",
						"          DesignPressure_UOM_Comos as string,",
						"          Width_UOM_Comos as string,",
						"          NamePlateNominalPowerNom_Comos as string,",
						"          WetCOGX as string,",
						"          Length_Comos as string,",
						"          PurchaseUnit as string,",
						"          Capacity_Comos_UOM as string,",
						"          CommissioningPackage as string,",
						"          OperatingPressureSide1Outlet_UOM_Comos as string,",
						"          CompensationCode as string,",
						"          ControlMode as string,",
						"          PipeFlowDirectionEndC4 as string,",
						"          SelectedRangeMin_Comos as string,",
						"          DatumY_UOM_Comos as string,",
						"          ControlNode as string,",
						"          RequisitionQtyNew as string,",
						"          OperatingTemperature as string,",
						"          MountedOn as string,",
						"          NamePlateRespInstallation as string,",
						"          WetCOGZ_Comos as string,",
						"          NamePlateNominalPowerOpe_Comos as string,",
						"          ComosBaseObject as string,",
						"          Width_Comos as string,",
						"          NP004 as string,",
						"          Height as string,",
						"          OperatingPressureCaseDependentMin as string,",
						"          ProcurementPackage_Status as string,",
						"          ElIdentCode as string,",
						"          SuctionPressureDesign_Comos as string,",
						"          PremissBranchND as string,",
						"          IPGrade1_SystemUID as string,",
						"          HeatDissipation_Comos_UOM as string,",
						"          OperatingPressureCaseDependent_UOM_Comos as string,",
						"          PDMSElementType as string,",
						"          WeightConsequenceRA as string,",
						"          WetCOGY_Comos as string,",
						"          SubProject_SystemUID as string,",
						"          Documents as string,",
						"          DryCOGX as string,",
						"          WetCOGY_UOM_Comos as string,",
						"          DesignPressureHotSide_UOM_Comos as string,",
						"          MainMaterialWeight as string,",
						"          MeasureRangeMax as string,",
						"          TanTanGeneralTop_UOM_Comos as string,",
						"          HeatExchangedPerUnit_UOM_Comos as string,",
						"          HookupActivity_SystemUID as string,",
						"          ReqExClass as string,",
						"          SafetryCriticalItem as string,",
						"          RequisitionTotalDesign as string,",
						"          NamePlateComments as string,",
						"          IsNisSignal as string,",
						"          VoltageSystem_Comos_UOM as string,",
						"          ExternalDatabaseID as string,",
						"          FootprintConsequenceRA as string,",
						"          NominalPower as string,",
						"          PartSystem as string,",
						"          DatumZ_UOM_Comos as string,",
						"          DiameterInner as string,",
						"          ExTemperatureClass2 as string,",
						"          CostCode as string,",
						"          OperatingPressureSide1InletMax_Comos as string,",
						"          PEMStatusCode3D as string,",
						"          PDMSModel as string,",
						"          DesignTemperatureHotSideMin_Comos as string,",
						"          ServiceDescription1 as string,",
						"          MCBRatedCurrent_Req as string,",
						"          VoltageSystem as string,",
						"          PdmsCorrespondingObject as string,",
						"          IPGrade3 as string,",
						"          ModellingDiscipline as string,",
						"          SignalFuntionClass as string,",
						"          FlowDesignMin_Comos as string,",
						"          MCBRatedCurrent_Comos_UOM as string,",
						"          RatedPower_Comos_UOM as string,",
						"          NamePlateLine5 as string,",
						"          Room as string,",
						"          MCBRatedCurrent as string,",
						"          ObjectClass as string,",
						"          DesignPressureHotSideMax as string,",
						"          CommodityCode as string,",
						"          HeatDissipation_Comos as string,",
						"          OperatingPressureSide1Inlet as string,",
						"          CalibratedRangeMin_Comos as string,",
						"          OperatingPressureCaseDependentMin_Comos as string,",
						"          ProcurementPackage_SystemUID as string,",
						"          RequisitonPlannedPurchaseBatch as string,",
						"          ApparentPowerNP as string,",
						"          HeatTraceTemperature_Comos as string,",
						"          Setpoint as string,",
						"          IgnitionSrcGroup as string,",
						"          EngContractor_SystemUID as string,",
						"          RequisitionEstimatedQty_UOM as string,",
						"          OperatingPressureSide1InletMin as string,",
						"          HookupArea as string,",
						"          ShaftPower_UOM_Comos as string,",
						"          NominalVoltage as string,",
						"          ValveNormalPos as string,",
						"          NamePlateType as string,",
						"          ExplosionProtection as string,",
						"          LockType as string,",
						"          OperatingVolume_UOM_Comos as string,",
						"          ShipToSite as string,",
						"          WeightStatus as string,",
						"          HeatTraceTemperature as string,",
						"          SurfaceAreaPerShell as string,",
						"          Mounting as string,",
						"          EXGasGroup3 as string,",
						"          HeatDissipationMax_Comos_UOM as string,",
						"          CertificationStandardValue1 as string,",
						"          DatumZ_Comos as string,",
						"          DesignPressureMax_Comos as string,",
						"          MainMaterialPID as string,",
						"          RatedPower_Comos as string,",
						"          VoltageRated_Comos_UOM as string,",
						"          DryCOGZ_Comos as string,",
						"          DryCOGY as string,",
						"          ComosBaseObjectDescription as string,",
						"          CarSealLockMechanism as string,",
						"          FluidNameHotSide as string,",
						"          WeightAccuraryRA as string,",
						"          DryCOGY_Comos as string,",
						"          CategoryCode_SystemUID as string,",
						"          Capacity as string,",
						"          PipeFlowDirectionEndC3 as string,",
						"          OperatingPressureSide1InletMin_Comos as string,",
						"          VoltageNominalCell as string,",
						"          Miscellaneous as string,",
						"          OperatingPressureCaseDependentMax_Comos as string,",
						"          MCpackage as string,",
						"          WeightStatus_SystemUID as string,",
						"          DryWeight_Comos as string,",
						"          NominalPower_Comos as string,",
						"          PdmsReferenceNumber as string,",
						"          RatedPowerOperating as string,",
						"          keyClass1SystemUID as string,",
						"          MeasureRange_UOM_Comos as string,",
						"          CalibratedRangeMax as string,",
						"          ValveNominalSize_Comos as string,",
						"          SubProjectName as string,",
						"          PowerOpe as string,",
						"          PowerOpe_Comos_UOM as string,",
						"          PowerOpe_Comos as string,",
						"          bk_TagNumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 500,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     partitionBy('hash', 1)) ~> Equipment",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 100,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> Area",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> StandardTable",
						"AreaTableMap, standardTableMap union(byName: true,",
						"     partitionBy('hash', 1))~> AreaStandardTable",
						"Equipment, AreaTableMap join(AreaCode_SystemUID == AreaTableMap@index,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> EquipmentAndAreaJoin",
						"Area derive(index = toString(byName('index')),",
						"          bk_area = toString(byName('bk_area')),",
						"          Owner_SystemUID = toString(byName('Owner_SystemUID')),",
						"          Facility_SystemUID_UnitTree = toString(byName('Facility_SystemUID_UnitTree')),",
						"          Facility = toString(byName('Facility')),",
						"          Project = toString(byName('Project')),",
						"          Owner_SystemFullName = toString(byName('Owner_SystemFullName')),",
						"          SystemFullName = toString(byName('SystemFullName')),",
						"          Owner = toString(byName('Owner')),",
						"          Facility_SystemUID = toString(byName('Facility_SystemUID')),",
						"          Name = toString(byName('Name')),",
						"          SystemUID = toString(byName('SystemUID')),",
						"          IsDeleted = toLong(byName('IsDeleted')),",
						"          Description = toString(byName('Description')),",
						"          LocationType = toString(byName('LocationType')),",
						"          FabricationContractor = toString(byName('FabricationContractor'))) ~> AreaTableMap",
						"StandardTable derive(index = toString(byName('index')),",
						"          Value7 = toString(byName('Value7')),",
						"          TableSystemUID = toString(byName('TableSystemUID')),",
						"          SystemUID = toString(byName('SystemUID')),",
						"          Value8 = toString(byName('Value8')),",
						"          projectId = toString(byName('projectId')),",
						"          Value9 = toString(byName('Value9')),",
						"          Project = toString(byName('Project')),",
						"          Value1 = toString(byName('Value1')),",
						"          TableName = toString(byName('TableName')),",
						"          Value4 = toString(byName('Value4')),",
						"          Name = toString(byName('Name')),",
						"          Description = toString(byName('Description')),",
						"          TableDescription = toString(byName('TableDescription')),",
						"          Value5 = toString(byName('Value5')),",
						"          Value10 = toString(byName('Value10')),",
						"          Value2 = toString(byName('Value2')),",
						"          Value3 = toString(byName('Value3')),",
						"          Value6 = toString(byName('Value6'))) ~> standardTableMap",
						"AreaStandardTable sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> mysink",
						"EquipmentAndAreaJoin sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> EquipmentAndAreaSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ParquetDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/equipmentAndAreaDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SourceBlobDataSet",
								"type": "DatasetReference"
							},
							"name": "Area"
						},
						{
							"dataset": {
								"referenceName": "SourceBlobDataSet",
								"type": "DatasetReference"
							},
							"name": "Equipment"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "JoinedSinkBlobStorage",
								"type": "DatasetReference"
							},
							"name": "JoinedJsonEquipmentAndArea"
						}
					],
					"transformations": [
						{
							"name": "EquipmentToAreaJoin"
						}
					],
					"scriptLines": [
						"source(output(",
						"          areaCode as string,",
						"          description as string,",
						"          ext_id as string,",
						"          fabricationContractor as string,",
						"          facility as string,",
						"          id as string,",
						"          locationType as string,",
						"          project as string,",
						"          systemFullName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine',",
						"     partitionBy('hash', 1)) ~> Area",
						"source(output(",
						"          area as string,",
						"          attributes as (id as string)[],",
						"          description as string,",
						"          discipline as string,",
						"          facility as string,",
						"          id as string,",
						"          processLine as string,",
						"          procurementPackage as string,",
						"          relations as (id as string)[],",
						"          system as string,",
						"          tagNumber as string,",
						"          topTag as string,",
						"          type as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine',",
						"     partitionBy('hash', 1)) ~> Equipment",
						"Equipment, Area join(area == Area@id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> EquipmentToAreaJoin",
						"EquipmentToAreaJoin sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['final.json'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          {Equipment Description} = Equipment@description,",
						"          tagNumber,",
						"          areaCode,",
						"          {Area Description} = Area@description,",
						"          project",
						"     ),",
						"     partitionBy('hash', 1)) ~> JoinedJsonEquipmentAndArea"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceBlobDataSet')]",
				"[concat(variables('factoryId'), '/datasets/JoinedSinkBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/standardToDiscipline')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ParquetDataSet",
								"type": "DatasetReference"
							},
							"name": "standardTable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParquetDataSet",
								"type": "DatasetReference"
							},
							"name": "DisciplineParquet"
						}
					],
					"transformations": [
						{
							"name": "MapStandardTable",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "DisciplineFilter"
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> standardTable",
						"standardTable derive(index = toString(byName('index')),",
						"          Value7 = toString(byName('Value7')),",
						"          TableSystemUID = toString(byName('TableSystemUID')),",
						"          SystemUID = toString(byName('SystemUID')),",
						"          Value8 = toString(byName('Value8')),",
						"          projectId = toString(byName('projectId')),",
						"          Value9 = toString(byName('Value9')),",
						"          Project = toString(byName('Project')),",
						"          Value1 = toString(byName('Value1')),",
						"          TableName = toString(byName('TableName')),",
						"          Value4 = toString(byName('Value4')),",
						"          Name = toString(byName('Name')),",
						"          Description = toString(byName('Description')),",
						"          TableDescription = toString(byName('TableDescription')),",
						"          Value5 = toString(byName('Value5')),",
						"          Value10 = toString(byName('Value10')),",
						"          Value2 = toString(byName('Value2')),",
						"          Value3 = toString(byName('Value3')),",
						"          Value6 = toString(byName('Value6'))) ~> MapStandardTable",
						"MapStandardTable filter(equals(TableName, 'ENG|01|ENGA0454')) ~> DisciplineFilter",
						"DisciplineFilter sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['comos_discipline.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> DisciplineParquet"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ParquetDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BlobToTableToMySqlTablesMovement')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Move Area Blob To Tables storage",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureTableSink",
								"azureTableInsertType": "merge",
								"writeBatchSize": 10000
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SourceBlobDataSet",
								"type": "DatasetReference",
								"parameters": {
									"BlobSourceFileName": {
										"value": "@pipeline().parameters.PipelineBlobSourceFileNameArea",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "TableStorageDataSet",
								"type": "DatasetReference",
								"parameters": {
									"TableStorageName": {
										"value": "@pipeline().parameters.PipelineTableNameArea",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Move Discipline Blob To Tables storage",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureTableSink",
								"azureTableInsertType": "merge",
								"writeBatchSize": 10000
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SourceBlobDataSet",
								"type": "DatasetReference",
								"parameters": {
									"BlobSourceFileName": {
										"value": "@pipeline().parameters.PipelineBlobSourceFileNameDiscipline",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "TableStorageDataSet",
								"type": "DatasetReference",
								"parameters": {
									"TableStorageName": {
										"value": "@pipeline().parameters.PipelineTableNameDiscipline",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Move Equipment Blob To Tables storage",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureTableSink",
								"azureTableInsertType": "merge",
								"writeBatchSize": 10000
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['type']"
										},
										"sink": {
											"name": "type",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['tagNumber']"
										},
										"sink": {
											"name": "tagNumber",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['description']"
										},
										"sink": {
											"name": "description",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['relations']"
										},
										"sink": {
											"name": "relations"
										}
									},
									{
										"source": {
											"path": "$['facility']"
										},
										"sink": {
											"name": "facility",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['area']"
										},
										"sink": {
											"name": "area",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['system']"
										},
										"sink": {
											"name": "system",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['discipline']"
										},
										"sink": {
											"name": "discipline",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['procurementPackage']"
										},
										"sink": {
											"name": "procurementPackage",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['processLine']"
										},
										"sink": {
											"name": "processLine",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['id']"
										},
										"sink": {
											"name": "id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['topTag']"
										},
										"sink": {
											"name": "topTag",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['attributes']"
										},
										"sink": {
											"name": "attributes"
										}
									}
								],
								"collectionReference": "",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "SourceBlobDataSet",
								"type": "DatasetReference",
								"parameters": {
									"BlobSourceFileName": {
										"value": "@pipeline().parameters.PipelineBlobSourceFileNameEquipment",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "TableStorageDataSet",
								"type": "DatasetReference",
								"parameters": {
									"TableStorageName": {
										"value": "@pipeline().parameters.PipelineTableNameEquipment",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Move System Blob To Tables storage",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureTableSink",
								"azureTableInsertType": "merge",
								"writeBatchSize": 10000
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SourceBlobDataSet",
								"type": "DatasetReference",
								"parameters": {
									"BlobSourceFileName": {
										"value": "@pipeline().parameters.PipelineBlobSourceFileNameSystem",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "TableStorageDataSet",
								"type": "DatasetReference",
								"parameters": {
									"TableStorageName": {
										"value": "@pipeline().parameters.PipelineTableNameSystem",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Movement from Table to MySql",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Move Area Blob To Tables storage",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Move Discipline Blob To Tables storage",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Move Equipment Blob To Tables storage",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Move System Blob To Tables storage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "TableToSourceMYSqlTableMovementPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pipelineTableStorageNameEquipment": {
									"value": "@pipeline().parameters.PipelineTableNameEquipment",
									"type": "Expression"
								},
								"pipelineTableStorageNameSystem": {
									"value": "@pipeline().parameters.PipelineTableNameSystem",
									"type": "Expression"
								},
								"pipelineTableStorageNameArea": {
									"value": "@pipeline().parameters.PipelineTableNameArea",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"PipelineBlobSourceFileNameArea": {
						"type": "string",
						"defaultValue": "johancastberg-area-data.json"
					},
					"PipelineBlobSourceFileNameSystem": {
						"type": "string",
						"defaultValue": "johancastberg-system-data.json"
					},
					"PipelineBlobSourceFileNameEquipment": {
						"type": "string",
						"defaultValue": "johancastberg-equipments-data.json"
					},
					"PipelineBlobSourceFileNameDiscipline": {
						"type": "string",
						"defaultValue": "johancastberg-discipline-data.json"
					},
					"PipelineTableNameArea": {
						"type": "string",
						"defaultValue": "Tarea"
					},
					"PipelineTableNameSystem": {
						"type": "string",
						"defaultValue": "Tsystem"
					},
					"PipelineTableNameEquipment": {
						"type": "string",
						"defaultValue": "Tequipment"
					},
					"PipelineTableNameDiscipline": {
						"type": "string",
						"defaultValue": "Tdiscipline"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceBlobDataSet')]",
				"[concat(variables('factoryId'), '/datasets/TableStorageDataSet')]",
				"[concat(variables('factoryId'), '/pipelines/TableToSourceMYSqlTableMovementPipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Comined Blob and Table movement')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Blob Area Data Movement",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "DESCRIPTION",
								"value": "Blob data movement between source and sync."
							}
						],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SourceBlobDataSet",
								"type": "DatasetReference",
								"parameters": {
									"BlobSourceFileName": {
										"value": "@pipeline().parameters.BlobDataMovementPipelineSourceNameArea",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "SinkBlobDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Blob System Data Movement",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "DESCRIPTION",
								"value": "Blob data movement between source and sync."
							}
						],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SourceBlobDataSet",
								"type": "DatasetReference",
								"parameters": {
									"BlobSourceFileName": {
										"value": "@pipeline().parameters.BlobDataMovementPipelineSourceNameSystem",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "SinkBlobDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Blob Equipment Data Movement",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "DESCRIPTION",
								"value": "Blob data movement between source and sync."
							}
						],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SourceBlobDataSet",
								"type": "DatasetReference",
								"parameters": {
									"BlobSourceFileName": {
										"value": "@pipeline().parameters.BlobDataMovementPipelineSourceNameEquipment",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "SinkBlobDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Blob Discipline Data Movement",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "DESCRIPTION",
								"value": "Blob data movement between source and sync."
							}
						],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SourceBlobDataSet",
								"type": "DatasetReference",
								"parameters": {
									"BlobSourceFileName": {
										"value": "@pipeline().parameters.BlobDataMovementPipelineSourceNameDiscipline",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "SinkBlobDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Move Tabl storage to MySql tables",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Blob Area Data Movement",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Blob System Data Movement",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Blob Equipment Data Movement",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Blob Discipline Data Movement",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "TableToSourceMYSqlTableMovementPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pipelineTableStorageNameEquipment": {
									"value": "@pipeline().parameters.CombinedPipelineTableStorageNameEquipment",
									"type": "Expression"
								},
								"pipelineMySqlDbTableNameEquipment": {
									"value": "@pipeline().parameters.CombinedPipelineMySqlDbTableNameEquipment",
									"type": "Expression"
								},
								"pipelineMySqlServerName": {
									"value": "@pipeline().parameters.CombinedPipelineMySqlServerName",
									"type": "Expression"
								},
								"pipelineMySqlDbName": {
									"value": "@pipeline().parameters.CombinedPipelineMySqlDbName",
									"type": "Expression"
								},
								"pipelineMySqlUserName": {
									"value": "@pipeline().parameters.CombinedPipelineMySqlUserName",
									"type": "Expression"
								},
								"pipelineMySqlPassword": {
									"value": "@pipeline().parameters.CombinedPipelineMySqlPassword",
									"type": "Expression"
								},
								"pipelineTableStorageNameSystem": {
									"value": "@pipeline().parameters.CombinedPipelineTableStorageNameSystem",
									"type": "Expression"
								},
								"pipelineMySqlDbTableNameSystem": {
									"value": "@pipeline().parameters.CombinedPipelineMySqlDbTableNameSystem",
									"type": "Expression"
								},
								"pipelineTableStorageNameArea": {
									"value": "@pipeline().parameters.CombinedPipelineTableStorageNameArea",
									"type": "Expression"
								},
								"pipelineMySqlDbTableNameArea": {
									"value": "@pipeline().parameters.CombinedPipelineMySqlDbTableNameArea",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"BlobDataMovementPipelineSinkFileName": {
						"type": "String"
					},
					"BlobDataMovementPipelineSourceNameArea": {
						"type": "String",
						"defaultValue": "johancastberg-area-data.json"
					},
					"BlobDataMovementPipelineSourceNameEquipment": {
						"type": "String",
						"defaultValue": "johancastberg-equipments-data.json"
					},
					"BlobDataMovementPipelineSourceNameSystem": {
						"type": "String",
						"defaultValue": "johancastberg-system-data.json"
					},
					"BlobDataMovementPipelineSourceNameDiscipline": {
						"type": "String",
						"defaultValue": "johancastberg-discipline-data.json"
					},
					"CombinedPipelineTableStorageNameEquipment": {
						"type": "string",
						"defaultValue": "equipments"
					},
					"CombinedPipelineMySqlDbTableNameEquipment": {
						"type": "string",
						"defaultValue": "equipment"
					},
					"CombinedPipelineMySqlServerName": {
						"type": "string",
						"defaultValue": "vaibhav-adf-mysql-server.mysql.database.azure.com"
					},
					"CombinedPipelineMySqlDbName": {
						"type": "string",
						"defaultValue": "dump"
					},
					"CombinedPipelineMySqlUserName": {
						"type": "string",
						"defaultValue": "vaibhav@vaibhav-adf-mysql-server"
					},
					"CombinedPipelineMySqlPassword": {
						"type": "string",
						"defaultValue": "Test1234"
					},
					"CombinedPipelineTableStorageNameSystem": {
						"type": "string",
						"defaultValue": "system"
					},
					"CombinedPipelineMySqlDbTableNameSystem": {
						"type": "string",
						"defaultValue": "system"
					},
					"CombinedPipelineTableStorageNameArea": {
						"type": "string",
						"defaultValue": "area"
					},
					"CombinedPipelineMySqlDbTableNameArea": {
						"type": "string",
						"defaultValue": "area"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceBlobDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SinkBlobDataSet')]",
				"[concat(variables('factoryId'), '/pipelines/TableToSourceMYSqlTableMovementPipeline')]"
			]
		}
	]
}